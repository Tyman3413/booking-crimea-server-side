import {
  Body,
  Controller,
  Delete,
  Get,
  HttpStatus,
  Param,
  Post,
  Query,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiBody,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';
import { Category } from './category.entity';
import { CreateCategoryDto } from './dto/create.category.dto';
import { CategoriesService } from './categories.service';
import { UtilsService } from '../common/utils/utils.service';
import { CurrentUser } from '../users/decorators/user.decorator';
import { isAdmin, isLandlord, UserPayload } from '../auth/dto/user.payload';
import { Public } from '../common/decorators/public.decorator';
import { AccessRightsException } from '../common/exceoptions/access.rights.exception';

@Controller('categories')
@ApiTags('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª–µ–π üìÉ')
export class CategoriesController {
  constructor(private readonly categoriesService: CategoriesService) {}

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @ApiOperation({ summary: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª—è' })
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
    type: Category,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª—è',
  })
  @ApiBody({
    type: CreateCategoryDto,
    description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª—è',
  })
  @Post()
  async create(
    @CurrentUser() user: UserPayload,
    @Body() addedCategory: CreateCategoryDto,
  ): Promise<Category> {
    if (isAdmin(user) || isLandlord(user)) {
      const isNameExist = await this.categoriesService.isNameExist(
        addedCategory.name,
      );

      if (!isNameExist) {
        return await this.categoriesService.create(addedCategory);
      }
    } else {
      throw new AccessRightsException();
    }
  }

  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–µ–ª—è' })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
    type: Category,
  })
  @ApiQuery({
    name: 'name',
    description: '–ù–∞–∑–≤–∞–Ω–∏–µ, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤ base64',
    required: false,
  })
  @Public()
  @Get()
  async getAll(@Query('name') name?: string): Promise<Category[]> {
    return await this.categoriesService.findAll(
      UtilsService.base64ToString(name),
    );
  }

  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–µ–ª—è –ø–æ ID' })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    type: Category,
  })
  @ApiParam({
    name: 'id',
    description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    required: true,
  })
  @Public()
  @Get(':id')
  async findOne(@Param('id') id: number): Promise<Category> {
    return await this.categoriesService.findOneById(id);
  }

  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞' })
  @ApiResponse({
    status: 200,
    description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞',
    type: Category,
  })
  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Delete(':id')
  async delete(
    @CurrentUser() user: UserPayload,
    @Param('id') id: number,
  ): Promise<Category> {
    if (isAdmin(user)) {
      return await this.categoriesService.deleteById(id);
    } else {
      throw new AccessRightsException();
    }
  }
}
